#!/usr/bin/env bash
#

USER=`whoami`
HOST=`hostname -s`
DOMAIN=`hostname -d`
export ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL=INFO
export ZOOKEEPER_CLIENT_PORT=2181
SERVER_PORT=2888
ELECTION_PORT=3888
export ZOOKEEPER_TICK_TIME=2000
export ZOOKEEPER_INIT_LIMIT=10
export ZOOKEEPER_SYNC_LIMIT=5
export ZOOKEEPER_MAX_CLIENT_CNXNS=60
export ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT=3
export ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL=12
SERVERS=1
export KAFKA_OPTS='-Dzookeeper.4lw.commands.whitelist=*'


function print_usage() {
echo "\
Usage: start-zookeeper [OPTIONS]
Starts a ZooKeeper server based on the supplied options.
    --servers           The number of servers in the ensemble. The default 
                        value is 1.
"
}

optspec=":hv-:"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                servers=*)
                    SERVERS=${OPTARG##*=}
                    ;;
                *)
                    echo "Unknown option --${OPTARG}" >&2
                    exit 1
                    ;;
            esac;;
        h)
            print_usage
            exit
            ;;
        v)
            echo "Parsing option: '-${optchar}'" >&2
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
    esac
done

if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
    NAME=${BASH_REMATCH[1]}
    ORD=${BASH_REMATCH[2]}
else
    echo "Failed to parse name and ordinal of Pod"
    exit 1
fi




ls -lR /mnt/zk-global
CFG_FILE_GLOBAL=/mnt/zk-global/cfg
if [[ -f "$CFG_FILE_GLOBAL" ]]; then
    source $CFG_FILE_GLOBAL
    echo "zk-global global config"
    echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    cat $CFG_FILE_GLOBAL 
    echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
fi

ls -lR /mnt/zk-global
CFG_FILE=/mnt/zk-global/${ORD}
if [[ -f "$CFG_FILE" ]]; then
    source $CFG_FILE
    echo "${ORD} specific config"
    echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    cat $CFG_FILE 
    echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
fi
echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
echo  ${WELCOME_MESSAGE:- "Hello Hello World from DataProxy"}
echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

export ZOOKEEPER_SERVER_ID=$((ORD+1))

# ZOOKEEPER_SERVERS: localhost:2888:3888;localhost:2888:3888;localhost:2888:3888
ZOOKEEPER_SERVERS=
SEP=
function print_servers() {
    for (( i=1; i<=$SERVERS; i++ ))
    do
ZOOKEEPER_SERVERS=${ZOOKEEPER_SERVERS}"$SEP$NAME-$((i-1)).$DOMAIN:$SERVER_PORT:$ELECTION_PORT"
SEP=";"
    done
}
export ZOOKEEPER_SERVERS



export ZOOKEEPER_CLIENT_PORT
export ZOOKEEPER_TICK_TIME
export ZOOKEEPER_GLOBAL_OUTSTANDING_LIMIT
export ZOOKEEPER_PRE_ALLOC_SIZE
export ZOOKEEPER_SNAP_COUNT
export ZOOKEEPER_TRACE_FILE
export ZOOKEEPER_MAX_CLIENT_CNXNS
export ZOOKEEPER_CLIENT_PORT_ADDRESS
export ZOOKEEPER_MIN_SESSION_TIMEOUT
export ZOOKEEPER_MAX_SESSION_TIMEOUT
export ZOOKEEPER_FSYNC_WARNING_THRESHOLDMS
export ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
export ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
export ZOOKEEPER_SYNC_ENABLED
export ZOOKEEPER_ELECTION_ALG
export ZOOKEEPER_INIT_LIMIT
export ZOOKEEPER_LEADER_SERVES
export ZOOKEEPER_SYNC_LIMIT
export ZOOKEEPER_CNX_TIMEOUT
export ZOOKEEPER_FORCE_SYNC
export ZOOKEEPER_JUTE_MAX_BUFFER
export ZOOKEEPER_SKIP_ACL
export ZOOKEEPER_QUORUM_LISTEN_ON_ALL_IPS
export ZOOKEEPER_CLIENT_CNXN_SOCKET
export ZOOKEEPER_SECURE_CLIENT_PORT
export ZOOKEEPER_SERVER_CNXN_SOCKET
export ZOOKEEPER_X509_AUTHENTICATION_PROVIDER_SUPER_USER
export ZOOKEEPER_SSL_AUTH_PROVIDER
export ZOOKEEPER_SSL_CLIENT_AUTH
export ZOOKEEPER_SSL_KEYSTORE_LOCATION
export ZOOKEEPER_SSL_KEYSTORE_PASSWORD
export ZOOKEEPER_SSL_KEYSTORE_TYPE
export ZOOKEEPER_SSL_TRUSTSTORE_LOCATION
export ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
export ZOOKEEPER_SSL_TRUSTSTORE_TYPE
export ZOOKEEPER_SSL_ENABLED_PROTOCOLS
export ZOOKEEPER_SSL_CONTEXT_SUPPLIER_CLASS
export ZOOKEEPER_SSL_CIPHER_SUITES
export ZOOKEEPER_SSL_HOSTNAME_VERIFICATION
export ZOOKEEPER_SSL_CRL
export ZOOKEEPER_SSL_OCPS
export ZOOKEEPER_SSL_HANDSHAKE_DETECTION_TIMEOUT_MILLIS
export ZOOKEEPER_SSL_QUORUM
export ZOOKEEPER_SSL_QUORUM_CLIENT_AUTH
export ZOOKEEPER_SSL_QUORUM_KEYSTORE_LOCATION
export ZOOKEEPER_SSL_QUORUM_KEYSTORE_PASSWORD
export ZOOKEEPER_SSL_QUORUM_KEYSTORE_TYPE
export ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_LOCATION
export ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_PASSWORD
export ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_TYPE
export ZOOKEEPER_SSL_QUORUM_ENABLED_PROTOCOLS
export ZOOKEEPER_SSL_QUORUM_CIPHER_SUITES
export ZOOKEEPER_SSL_QUORUM_CONTEXT_SUPPLIER_CLASS
export ZOOKEEPER_SSL_QUORUM_HOSTNAME_VERIFICATION
export ZOOKEEPER_SSL_QUORUM_CRL
export ZOOKEEPER_SSL_QUORUM_OCPS
export ZOOKEEPER_SSL_QUORUM_HANDSHAKE_DETECTION_TIMEOUT_MILLIS
export ZOOKEEPER_SERVER_CNXN_FACTORY
export ZOOKEEPER_AUTH_PROVIDER_X509
export ZOOKEEPER_AUTH_PROVIDER_SASL
export ZOOKEEPER_CLIENT_PORT_UNIFICATION
export ZOOKEEPER_ADMIN_ENABLE_SERVER
export ZOOKEEPER_ADMIN_SERVER_ADDRESS
export ZOOKEEPER_ADMIN_SERVER_PORT
export ZOOKEEPER_ADMIN_IDLE_TIMEOUT
export ZOOKEEPER_ADMIN_COMMAND_URL


export ZOOKEEPER_SERVERS
export ZOOKEEPER_GROUPS
export ZOOKEEPER_WEIGHTS

export ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL="${ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL:-INFO}"
export ZOOKEEPER_LOG4J_ROOT_LOGLEVEL="${ZOOKEEPER_LOG4J_ROOT_LOGLEVEL:-INFO}"
export ZOOKEEPER_LOG4J_LOGGERS

#/etc/confluent/docker/run

# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

. /etc/confluent/docker/bash-config

echo "===> User"
id

echo "===> Configuring ..."
#/etc/confluent/docker/configure

. /etc/confluent/docker/bash-config

dub ensure ZOOKEEPER_CLIENT_PORT

dub path /etc/kafka/ writable

echo '###############################################'
echo '######## initial printenv ######'
echo '###############################################'
printenv

# myid is required for clusters
if [[ -n "${ZOOKEEPER_SERVERS-}" ]]
then
  echo '${ZOOKEEPER_SERVERS}='${ZOOKEEPER_SERVERS}
  
  dub ensure ZOOKEEPER_SERVER_ID
  export ZOOKEEPER_INIT_LIMIT=${ZOOKEEPER_INIT_LIMIT:-"10"}
  export ZOOKEEPER_SYNC_LIMIT=${ZOOKEEPER_SYNC_LIMIT:-"5"}
fi

if [[ -n "${ZOOKEEPER_SERVER_ID-}" ]]
then
  dub template "/etc/confluent/docker/myid.template" "/var/lib/${COMPONENT}/data/myid"
fi

if [[ -n "${KAFKA_JMX_OPTS-}" ]]
then
  if [[ ! $KAFKA_JMX_OPTS == *"com.sun.management.jmxremote.rmi.port"*  ]]
  then
    echo "KAFKA_JMX_OPTS should contain 'com.sun.management.jmxremote.rmi.port' property. It is required for accessing the JMX metrics externally."
  fi
fi

dub template "/etc/confluent/docker/${COMPONENT}.properties.template" "/etc/kafka/${COMPONENT}.properties"
dub template "/etc/confluent/docker/log4j.properties.template" "/etc/kafka/log4j.properties"
dub template "/etc/confluent/docker/tools-log4j.properties.template" "/etc/kafka/tools-log4j.properties"


echo '###############################################'
echo '######## again printenv ######'
echo '###############################################'
printenv


echo "===> Running preflight checks ... "
/etc/confluent/docker/ensure

echo '###############################################'
echo '######## last printenv ######'
echo '###############################################'
printenv


echo "===> Launching ... "
exec /etc/confluent/docker/launch